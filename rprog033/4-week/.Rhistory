data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHopitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHopitals[[i]][[index]]
}
rankResults
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
class(rankResults)
submit()
rownames(rankResults)
rownames(stateEntryCount)
names(stateEntryCount)
rownames(rankResults) <- names(stateEntryCount)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHopitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHopitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
rankResults
}
submit()
class(rankResults)
type(rankResults)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHopitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHopitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
rankResults
}
tail(rankall("heart failure"), 10)
answer <- (rankall("heart failure")
)
class(answer)
type(answer)
answer
rankhospital[["WI"]][[1]]
rankHospitals[["WI"]][[1]]
rankHopitals[["WI"]][[1]]
rankHopitals[["WI"]]
data(data$state == "WI", )
data[(]data$state == "WI", ]
data[data$state == "WI", ]
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHopitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHopitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
submit()
submit()
submit()
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
outcomeCols <- c(2, 7, 17)
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
data[data$state == "WI",]
View(data)
data[data$state == "WI",3]
stateEntryCount <- lapply(split(data$rate, data$state), length)
stateEntryCount
stateEntryCount$WI
rankHopitals <- split(data$hosp, data$state)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankHospitals <- split(data$hosp, data$state)
rankHospitals$WI
data <- data[order(data$state, data$rate, decreasing = F), ]
rankHospitals <- split(data$hosp, data$state)
rankHospitals$WI
data[data$state == "WI",]
head(data[data$state == "WI",])
WI <- rankHospitals$WI
order(WI)
head(order(WI),25)
WI(order(WI))
WI[(]order(WI)]
WI[order(WI)]
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, data$hospital, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
submit()
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, data$hosp, decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, as.character(data$hosp), decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, as.character(data$hosp), decreasing = T), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, as.numeric(data$hosp), decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, as.factor(data$hosp), decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
head(data[data$state == "WI",])
WI
WI <- head(data[data$state == "WI",])
WI[1,]
WI[1,3]
WI[1,3]>WI[2,3]
WI[1,3]<WI[2,3]
WI[1,3]==WI[2,3]
WI[1,1]==WI[2,1]
WI[1,1]>WI[2,1]
WI[1,1]<WI[2,1]
WI[@,3]
WI[2,3]
WI[2,1]
WI[1,1]
WI[1,1]>WI[2,1]
str(data$hosp)
as.numeric(data$hosp)
as.numeric(data$hosp[1])
type.convert(data$hos)
?type.convert
type.convert(data$hosp, numerals="allow.loss")
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, type.convert(data$hosp), decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## Check that state and outcome are valid
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
if (length(which(validOutcomes == outcome)) == 0) stop("invalid outcome")
if (outcome == validOutcomes[1]) outcomeCols <- c(2, 7, 11)
else if (outcome == validOutcomes[2]) outcomeCols <- c(2, 7, 17)
else outcomeCols <- c(2, 7, 23)
## Simplify to necessary columns based on 'outcome'
data <- data[, outcomeCols]
colnames(data) <- c("hosp", "state", "rate")    # Easier col.names
data[, "rate"] <- as.numeric(data[, "rate"])    # Coerce 'rate' to numeric
data <- data[which(!is.na(data[data$rate,])),]  # Removing NA values
## Initializing final data frame
rankResults <- data.frame("hospital" = NA, "state" = levels(as.factor(data$state)))
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- data[order(data$state, data$rate, as.numeric(data$hosp), decreasing = F), ]
stateEntryCount <- lapply(split(data$rate, data$state), length)
if(num == "best") {num <- rep(1,54)}
if(num == "worst") {num <- as.numeric(stateEntryCount)}
else {num <- rep(num,54)}
rankHospitals <- split(data$hosp, data$state)
for(i in 1:54) {
index <- num[i]
if(index <= stateEntryCount[i])
rankResults[i,1] <- rankHospitals[[i]][[index]]
}
rownames(rankResults) <- names(stateEntryCount)
return(rankResults)
}
rankall("heart failure", 10)
