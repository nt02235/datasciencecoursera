library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(KernSmooth)
install.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(30)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
install.packackes("swirl")
install.packages("swirl")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[ , 11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, sapply)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
rm(c(flag_colors, flag_shapes, flag_colors))
rm(c("flag_colors", "flag_shapes"))
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInv()
if(!is.null(i)){
message("returning cached matrix inverse")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInv(i)
i
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
setInv <- function(inv) i <<- inv
getInv <- function() i
list(set = set, get = get,
setInv = setInv, getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInv()
if(!is.null(i)){
message("returning cached matrix inverse")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInv(i)
i
}
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
makeCacheMatrix(m)
mMatrix <- makeCacheMatrix(m)
cacheSolve(mMatrix)
cacheSolve(mMatrix)
makeCacheMatrix()
m <- makeCacheMatrix()
m
m$get
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
m$get
m$get()
m <- makeCacheMatrix(m)
m$get
m$get()
m
m$get
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
makeCacheMatrix(m)
mMatrix<-makeCacheMatrix(m)
mMatrix$get
mMatrix$get()
empty <- makeCacheMatrix()
empty$get
empty$get()
environment(x)
environment(m)
nchar("cd051b6eded4ea36bcf3ed88c2efd8441e47e2db")
library(datasets)
data(iris)
?iris
iris
lapply(iris,class)
dim(iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length, na.rm=F)
mean(iris$Sepal.Length, na.rm=T)
apply(iris,mean)
apply
?apply
apply(iris,1:4,mean)
apply(iris, 2, mean)
lapply(iris,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[1:4,],2,mean)
apply(iris[1:4,],1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
lapply(mtcars,class)
sapply(mtcars,class)
split(mtcars,mpg)
split(mtcars,mtcars$mpg)
x<-split(mtcars,mtcars$mpg)
x
rm(x)
split(mtcars,2)
?split
split(mtcars,mtcars$cyl)
sapply(split(mtcars,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
cylMean<-sapply(split(mtcars$mpg,mtcars$cyl),mean)
cylMean
cylMean$4
cylMean[1]
cylMean[3]-cylMean[1]
debug(ls)
ls
exit()
debug(ls)
ls()
library(datasets)
data(iris)
split(iris$Sepal.Length,"virginica")
mean(split(iris$Sepal.Length,"virginica"))
mean(split(iris$Sepal.Length,"virginica"), rm.na=F)
split(iris$Sepal.Length,"virginica")
vtemp<-split(iris$Sepal.Length,"virginica")
vtemp
mean(vtemp)
class(vtemp)
sapply(split(iris$Sepal.Length,"virginica"),mean)
sapply(iris$Sepal.Length,mean,na.rm=F)
vtemp<-iris[iris$Species=="virginica",iris$Sepal.Length]
vtemp<-iris[iris$Species=="virginica","Sepal.Length"]
vtemp
mean(vtemp)
View(iris)
split(iris,iris$Species)
as.factors(iris$Species)
levels(iris$Species)
split(iris$Sepal.Length,levels(iris$Species))
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean,na.rm=F)
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean,na.rm=T)
iris[iris$Species=="virginica",]
virginoca<-iris[iris$Species=="virginica",]
virginoca$Sepal.Length
mean(virginoca$Sepal.Length)
summary(virginoca$Sepal.Length)
sapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
apply(split(iris$Sepal.Length,levels(iris$Species)),summary)
lapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hpCyl<-tapply(mtcars$hp, mtcars$cyl, mean)
hpCyl[3]-hpCyl[1]
hpCyl
hpCyl[1]
hpCyl[3]
abs(hpCyl[3]-hpCyl[1])
tapply(iris$Sepal.Length,iris$Species)
tapply(mean,iris$Sepal.Length,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
mean(virginoca$Sepal.Length)
mean(iris[iris$Species=="virginica",])
mean(iris[iris$Species=="virginica","Sepal.Length"])
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
lapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
lapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
setwd("~/Google Drive/Education/Coursera/datasciencecoursera/rprog033/4-week")
read.csv("outcome-of-care-measures.csv", header=T)
outcome <- read.csv("outcome-of-care-measures.csv", header=T)
head(outcome)
> outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
ncol(outcome)
sapply(outcome,class)
names(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", header=T)
sapply(outcome,class)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[,11] <- as.numeric(outcome[,11])
outcome[,11]
hist(outcome[,11])
levels(outcome$State)
levels(as.factor(outcome$State))
?read.csv
set.seed(1)
rpois(5, 2)
validStates <- levels(as.factor(outcome$State))
outcome[,13]
colname(outcome)
colnames(outcome)
validOutcomes <- c("heart attack", "heart failure", "pneumonia")
state <- "VA"
which(validStates==state)
"ZZ"
which(validStates==state)
state <- "ZZ"
which(validStates==state)
is.null(which(validStates==state))
which(validStates==state)==0
?error
?stop
which(validStates==state)
length(which(validStates==state))
state<-"NY"
length(which(validStates==state))
state<-"ny"
length(which(validStates==state))
if(length(which(validStates==state)) == 0)
length(which(validStates==state)) == 0
outcome <- "pneumonia"
message("Error in best( \""+ state + "\", \"" + outcome + "\") : invalid state")
paste("Error in best( \"", state, "\", \"", outcome, "\") : invalid state")
paste("Error in best( ", state, "\", \"", outcome, "\") : invalid state")
length(which(validOutcomes == outcome)) == 0
outcome <- sdlkfj
length(which(validOutcomes == outcome)) == 0
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates <- levels(as.factor(data$State))
outcome <- sdlkfj
outcome <- "sdlkfj"
length(which(validOutcomes == outcome)) == 0
state <- "TX"
outcome <- "heart attack"
data[data$State == state,]
data[data$State == state,11]
min(data[data$State == state,11])
split(data[data$State==state,11],data$Hospital.Name)
tapply(data[data$State==state,11],data$Hospital.Name,min)
hosps <- split(data[data$State==state,11],data$Hospital.Name)
split(data[data$State==state,11],data$Hospital.Name)
?split
split(data[data$State==state,11],data$Hospital.Name, drop=T)
?apply
temp<-data[data$State==state,]
temp
temp$State=="NY"
temp$State=="TC"
temp$State=="TX"
temp[,11]
temp[-(temp[,11]=="Not Available"),]
temp[-(temp[,11]=="Not Available"),11]
temp[(temp[,11]!="Not Available"),11]
temp <- temp[(temp[,11]!="Not Available"),11]
temp
temp<-data[data$State==state,]
temp <- temp[(temp[,11]!="Not Available"),]
temp
temp$State=="TX"
tapply(temp$Hospital.Name,temp[,11])
?tapply
temp[2,11]
temp[,(2,11)]
temp[,c(2,11)]
ok <- temp[,c(2,11)]
ok
View(ok)
?sort
sort(ok)
sort(ok, partial=2)
order(ok$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
ok[order(ok$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
ok<-ok[order(ok$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
View(ok)
?Read.csv
?read.csv
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
?case
?cases
outcomeCol <- integer(0)
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) outcomeCol <- 11   else if(outcome == validOutcomes[2]) outcomeCol <- 17   else if(outcome == validOutcomes[3]) outcomeCol <- 23
outcomeCol <- integer(0)
if(outcome == validOutcomes[1]) outcomeCol <- 11
else if(outcome == validOutcomes[2]) outcomeCol <- 17
if(outcome == validOutcomes[1]) outcomeCol <- 11   else if(outcome == validOutcomes[2]) outcomeCol <- 17
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) {outcomeCol <- 11}   else if(outcome == validOutcomes[2]) {outcomeCol <- 17}   else if(outcome == validOutcomes[3]) {outcomeCol <- 23}
?if
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) {outcomeCol <- 11}   else if(outcome == validOutcomes[2]) {outcomeCol <- 17}   else(outcome == validOutcomes[3]) {outcomeCol <- 23}
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) {outcomeCol <- 11}   else if(outcome == validOutcomes[2]) {outcomeCol <- 17}   else {outcomeCol <- 23}
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) {outcomeCol <- 11}   else if(outcome == validOutcomes[2]) {outcomeCol <- 17}   else {outcomeCol <- 23}
outcomeCol <- integer(0)
outcome == validOutcomes[1]) {outcomeCol <- 11}
outcomeCol <- integer(0)      if(outcome == validOutcomes[1]) {      outcomeCol <- 11   } else if(outcome == validOutcomes[2]) {      outcomeCol <- 17   } else {      outcomeCol <- 23   }
outcome == validOutcomes[1]
outcome == validOutcomes[2]
data[,c(2,7,outcomeCol)]
head(data[,c(2,7,outcomeCol)])
head(data[,c(2,7,as.numeric(outcomeCol)]))
c(2,7,outcomeCol)
outcomeCols <- c(2,7,11)
data[,outcomeCols]
head(data[,outcomeCols])
if(outcome == validOutcomes[1]) {      outcomeCols <- c(2,7,11)   } else if(outcome == validOutcomes[2]) {      outcomeCols <- c(2,7,17)   } else {      outcomeCols <- c(2,7,23)   }
if(outcome == validOutcomes[1]) {      outcomeCols <- c(2,7,11)   }
if(outcome == validOutcomes[1]) {      outcomeCols <- c(2,7,11)   }
if(outcome == validOutcomes[1]) {    outcomeCols <- c(2,7,11)}
if(outcome == validOutcomes[1]) {
outcomeCols <- c(2,7,11)
}
rm(outcomeCol)
if(outcome == validOutcomes[1]) {      outcomeCols <- c(2,7,11)   } else if(outcome == validOutcomes[2]) {      outcomeCols <- c(2,7,17)   } else {      outcomeCols <- c(2,7,23)   }
